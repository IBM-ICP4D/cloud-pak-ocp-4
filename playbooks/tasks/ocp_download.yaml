---

- name: Obtain OpenShift packages from URL "{{openshift_base_url}}"
  shell: |
    curl -s {{openshift_base_url}} --list-only | grep 'href='
  register: openshift_packages
  until: openshift_packages is not failed
  retries: 10
  delay: 10
  args:
    warn: false

- name: Obtain Red Hat CoreOS packages from URL "{{rhcos_base_url}}"
  shell: |
    curl -L -s {{rhcos_base_url}} --list-only | grep 'href='
  register: rhcos_packages
  until: rhcos_packages is not failed
  retries: 10
  delay: 10
  args:
    warn: false

# The below tasks will extract the exact file names from the list of found packages.
# This is needed because the content of the "latest" directory tends to change without notice.
- set_fact:
    openshift_client_package: "{{openshift_packages.stdout | regex_search(vars['openshift_client_package_pattern'],'\\1') | first }}"
    openshift_installer_package: "{{openshift_packages.stdout | regex_search(vars['openshift_install_package_pattern'],'\\1') | first }}"

- set_fact:
    rhcos_kernel_package: "{{rhcos_packages.stdout | regex_search(vars['rhcos_kernel_package_pattern'],'\\1') | first }}"
    rhcos_initramfs_package: "{{rhcos_packages.stdout | regex_search(vars['rhcos_initramfs_package_pattern'],'\\1') | first }}"
  when: rhcos_installation_method=="pxe"

- set_fact:
    rhcos_rootfs_package: "{{rhcos_packages.stdout | regex_search(vars['rhcos_rootfs_package_pattern'],'\\1') | first }}"
  when: rhcos_installation_method=="pxe"

- set_fact:
    rhcos_ova_package: "{{rhcos_packages.stdout | regex_search(vars['rhcos_ova_package_pattern'],'\\1') | first }}"
  when: rhcos_installation_method=="ova"

- name: Download OpenShift client '{{openshift_base_url | regex_replace("\/$", "")}}/{{openshift_client_package}}'
  get_url:
    url: '{{openshift_base_url | regex_replace("\/$", "")}}/{{openshift_client_package}}'
    dest: "{{ocp_install_dir}}/{{openshift_client_package}}"
    owner: root
    mode: 0644
  register: download_result
  until: download_result is succeeded
  retries: 5
  delay: 30

- name: Download OpenShift installer '{{openshift_base_url | regex_replace("\/$", "")}}/{{openshift_installer_package}}'
  get_url:
    url: '{{openshift_base_url | regex_replace("\/$", "")}}/{{openshift_installer_package}}'
    dest: "{{ocp_install_dir}}/{{openshift_installer_package}}"
    owner: root
    mode: 0644
  register: download_result
  until: download_result is succeeded
  retries: 5
  delay: 30

- name: Unpack OpenShift client
  unarchive:
    src: "{{ocp_install_dir}}/{{openshift_client_package}}"
    dest: /usr/local/bin

- name: Unpack OpenShift installer
  unarchive:
    src: "{{ocp_install_dir}}/{{openshift_installer_package}}"
    dest: "{{ocp_install_dir}}"

- name: Download kernel package '{{rhcos_base_url | regex_replace("\/$", "")}}/{{rhcos_kernel_package}}'
  get_url:
    url: '{{rhcos_base_url | regex_replace("\/$", "")}}/{{rhcos_kernel_package}}'
    dest: "{{ocp_install_dir}}/{{rhcos_kernel_package}}"
    owner: root
    mode: 0644
  register: download_result
  until: download_result is succeeded
  retries: 3
  when: rhcos_installation_method=="pxe"

- name: Download initial RAM disk package '{{rhcos_base_url | regex_replace("\/$", "")}}/{{rhcos_initramfs_package}}'
  get_url:
    url: '{{rhcos_base_url | regex_replace("\/$", "")}}/{{rhcos_initramfs_package}}'
    dest: "{{ocp_install_dir}}/{{rhcos_initramfs_package}}"
    owner: root
    mode: 0644
  register: download_result
  until: download_result is succeeded
  retries: 3
  when: rhcos_installation_method=="pxe"

- name: Download root file system package '{{rhcos_base_url | regex_replace("\/$", "")}}/{{rhcos_rootfs_package}}' 
  get_url:
    url: '{{rhcos_base_url | regex_replace("\/$", "")}}/{{rhcos_rootfs_package}}'
    dest: "{{ocp_install_dir}}/{{rhcos_rootfs_package}}"
    owner: root
    mode: 0644
  register: download_result
  until: download_result is succeeded
  retries: 3
  when: rhcos_installation_method=="pxe"

- block:
  - name: Check if SELinux has already been configured for CoreOS Kernel package
    shell:
      semanage fcontext | grep httpd_sys_content_t | grep '{{ocp_install_dir}}/{{rhcos_kernel_package}}' | wc -l
    register: _selinux_rhcos
  - name: Enable access to CoreOS Kernel package
    shell: |
      semanage sefcontext -a -t httpd_sys_content_t -s system_u '{{ocp_install_dir}}/{{rhcos_kernel_package}}'
    when: _selinux_rhcos.stdout == "0"

  - name: Check if SELinux has already been configured for CoreOS initramfs package
    shell:
      semanage fcontext | grep httpd_sys_content_t | grep '{{ocp_install_dir}}/{{rhcos_initramfs_package}}' | wc -l
    register: _selinux_rhcos
  - name: Enable access to CoreOS initramfs package
    shell: |
      semanage sefcontext -a -t httpd_sys_content_t -s system_u '{{ocp_install_dir}}/{{rhcos_initramfs_package}}'
    when: _selinux_rhcos.stdout == "0"

  - name: Check if SELinux has already been configured for CoreOS rootfs package
    shell:
      semanage fcontext | grep httpd_sys_content_t | grep '{{ocp_install_dir}}/{{rhcos_rootfs_package}}' | wc -l
    register: _selinux_rhcos
  - name: Enable access to CoreOS rootfs package
    shell: |
      semanage sefcontext -a -t httpd_sys_content_t -s system_u '{{ocp_install_dir}}/{{rhcos_rootfs_package}}'
    when: _selinux_rhcos.stdout == "0"

  when:
  - rhcos_installation_method=="pxe"
  - ansible_selinux.status=='enabled'

- name: Restore SELinux context for CoreOS files
  shell: restorecon -Rv "{{ocp_install_dir}}/*"

- name: Download CoreOS OVA package '{{rhcos_base_url | regex_replace("\/$", "")}}/{{rhcos_ova_package}}'
  get_url:
    url: '{{rhcos_base_url | regex_replace("\/$", "")}}/{{rhcos_ova_package}}'
    dest: "{{ocp_install_dir}}/{{rhcos_ova_package}}"
    owner: root
    mode: 0644
  when: rhcos_installation_method=="ova"
