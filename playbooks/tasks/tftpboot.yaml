---
- name: Find CoreOS kernel
  find:
    paths: "{{ocp_install_dir}}"
    patterns: "{{rhcos_kernel_package_pattern}}"
    use_regex: yes
  register: found_kernel_files

- name: Find initial RAM disk package
  find:
    paths: "{{ocp_install_dir}}"
    patterns: "{{rhcos_initramfs_package_pattern}}"
    use_regex: yes
  register: found_initramfs_files

- name: Find root file system package
  find:
    paths: "{{ocp_install_dir}}"
    patterns: "{{rhcos_rootfs_package_pattern}}"
    use_regex: yes
  register: found_rootfs_files

- set_fact:
    rhcos_kernel_package: "{{(found_kernel_files.files | last)['path']}}" 
    rhcos_initramfs_package: "{{(found_initramfs_files.files | last)['path']}}" 

- set_fact:
    rhcos_rootfs_package: "{{(found_rootfs_files.files | last)['path']}}" 

- name: Create TFTP directory
  file:
    group: "root"
    mode: 0755
    owner: "root"
    path: "{{ocp_install_dir}}/tftpboot"
    state: directory

- block:
  - name: Check if SELinux has already been configured for TFTP files
    shell:
      semanage fcontext | grep httpd_sys_content_t | grep '{{ocp_install_dir}}/tftpboot(/.*)?' | wc -l
    register: _tftp_selinux

  - name: Enable access to TFTP files (SELinux)
    shell: |
      semanage sefcontext -a -t httpd_sys_content_t -s system_u '{{ocp_install_dir}}/tftpboot(/.*)?'
    when: _tftp_selinux.stdout == "0"
  when: 
  - ansible_selinux.status=='enabled'
  
- name: Restore SELinux context for TFTP
  shell: restorecon -Rv "{{ocp_install_dir}}/tftpboot"

- name: Create TFTP images directory
  file:
    group: "root"
    mode: 0755
    owner: "root"
    path: "{{ocp_install_dir}}/tftpboot/images"
    state: directory

- name: Copy kernel package "{{rhcos_kernel_package}}" to TFTP
  copy:
    src: "{{rhcos_kernel_package}}"
    dest: "{{ocp_install_dir}}/tftpboot/images/{{rhcos_kernel_package | basename}}"
    remote_src: True

- name: Copy initial RAM file system package "{{rhcos_initramfs_package}}" to TFTP
  copy:
    src: "{{rhcos_initramfs_package}}"
    dest: "{{ocp_install_dir}}/tftpboot/images/{{rhcos_initramfs_package | basename}}"
    remote_src: True

- name: Copy root file system package "{{rhcos_initramfs_package}}" to TFTP
  copy:
    src: "{{rhcos_rootfs_package}}"
    dest: "{{ocp_install_dir}}/tftpboot/images/{{rhcos_rootfs_package | basename}}"
    remote_src: True

- name: Create TFTP configuration directory
  file:
    group: "root"
    mode: 0755
    owner: "root"
    path: "{{ocp_install_dir}}/tftpboot/pxelinux.cfg"
    state: directory

- name: Check if /var/lib/tftpboot exists
  stat:
    path: "/var/lib/tftpboot"
  register: var_lib_tftpboot

- name: Create symlink /tftpboot if TFTP was installed in /var/lib/tftpboot
  file:
    path: "/tftpboot"
    src: "/var/lib/tftpboot"
    state: link
  when: var_lib_tftpboot.stat.exists

- name: Create symlinks to pxelinux.cfg and images
  file:
    path: "/tftpboot/{{item}}"
    src: "{{ocp_install_dir}}/tftpboot/{{item}}"
    state: link
  with_items:
    ['pxelinux.cfg','images']

- name: Generate default boot configuration file
  template:
    src: tftpboot_default.j2
    dest: "{{ocp_install_dir}}/tftpboot/pxelinux.cfg/default"
    owner: root
    group: root
    mode: 0644

- name: Generate boot menu for bootstrap
  template:
    src: tftpboot_vm_menu.j2
    dest: "{{ocp_install_dir}}/tftpboot/pxelinux.cfg/{{hostvars[item]['host']}}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - "{{groups['bootstrap']}}"
  vars:
    node_type: bootstrap
    metal_bios_file: "{{(found_metal_files.files | last)['path']}}" 

- name: Generate boot menu for masters
  template:
    src: tftpboot_vm_menu.j2
    dest: "{{ocp_install_dir}}/tftpboot/pxelinux.cfg/{{hostvars[item]['host']}}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - "{{groups['masters']}}"
  vars:
    node_type: master

- name: Generate boot menu for workers
  template:
    src: tftpboot_vm_menu.j2
    dest: "{{ocp_install_dir}}/tftpboot/pxelinux.cfg/{{hostvars[item]['host']}}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - "{{groups['workers']}}"
  vars:
    node_type: worker